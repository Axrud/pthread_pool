

                         PTHREAD POOL


PTHREAD POOL is a lightweight project that implements thread pool functionality
for POSIX-compatible operating systems. It maintains a task queue, a pool of
free tasks, as well as the execution of recursive tasks (tasks set to execute
inside another task in a thread pool).


                         USAGE OF PTHREAD POOL


To start using the pthread_pool, you need to include 2 files in your
project(pthread_pool.h and pthread_pool.c), in all places where you include
pthread_pool.h, it must be included before other includes. The best way to see
how to use the pthread_pool in your code is to look at the test example
(test_pthread_pool.c).

Step sequence:
1) Initializing pthread_pool(by pthread_pool_alloc)
2) Allocating task(by pthread_pool_balloc_task or pthread_pool_nballoc_task)
3) Filling task with arguments(by ptp_task_push_arg) and work routine(member task_fun_ptr)
3) Adding task to pthread_pool(by pthread_pool_add_task)

All added tasks can be joined(by pthread_pool_joinall_tasks).
All added tasks not yet started can be removed(by pthread_pool_task_pool_size).

The difference between pthread_pool_balloc_task and pthread_pool_nballoc_task
is that pthread_pool_balloc_task can blocks the calling thread if the pool of
free tasks is empty and pthread_pool_nballoc_task will always either returns
the new-allocated task without blocking the thread (if argument opt!=0) or
returns NULL (if argument opt==0 and the pool of free tasks empty). In view of
this, function pthread_pool_nballoc_task must be used with caution, because it
can lead to a large growth of the internal pool of tasks. If this happens, the
task pool may be reduced(by pthread_pool_task_pool_size/pthread_pool_reduce_task_pool).

Functions pthread_pool_qerror_empty and pthread_pool_qerror_pool is for dealing
with internal pthread_pool errors as well as errors that occurred within code
of user task routines(if they set errno).

Tasks can be assigned recursively(i.e. by other tasks in pthread_pool), but in this
case within one task can be assigned recursively maximum of MAX_REC_CALLS tasks,
otherwise, races may occure.



